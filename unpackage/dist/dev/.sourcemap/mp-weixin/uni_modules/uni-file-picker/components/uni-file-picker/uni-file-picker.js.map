{"version":3,"sources":["webpack:///C:/Users/PC/Desktop/yb_mini/uni_modules/uni-file-picker/components/uni-file-picker/uni-file-picker.vue?ac13","webpack:///C:/Users/PC/Desktop/yb_mini/uni_modules/uni-file-picker/components/uni-file-picker/uni-file-picker.vue?4333","webpack:///C:/Users/PC/Desktop/yb_mini/uni_modules/uni-file-picker/components/uni-file-picker/uni-file-picker.vue?4996","webpack:///C:/Users/PC/Desktop/yb_mini/uni_modules/uni-file-picker/components/uni-file-picker/uni-file-picker.vue?bb37","uni-app:///uni_modules/uni-file-picker/components/uni-file-picker/uni-file-picker.vue","webpack:///C:/Users/PC/Desktop/yb_mini/uni_modules/uni-file-picker/components/uni-file-picker/uni-file-picker.vue?19c0","webpack:///C:/Users/PC/Desktop/yb_mini/uni_modules/uni-file-picker/components/uni-file-picker/uni-file-picker.vue?6e26"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4H;AAC5H;AACmE;AACL;AACa;;;AAG3E;AACqK;AACrK,gBAAgB,+KAAU;AAC1B,EAAE,qFAAM;AACR,EAAE,0FAAM;AACR,EAAE,mGAAe;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE,8FAAU;AACZ;AACA;;AAEA;AACe,gF;;;;;;;;;;;;ACvBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAymB,CAAgB,moBAAG,EAAC,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACyB7nB,oG;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;AACA,uBADA;AAEA;AACA,4BADA;AAEA,0BAFA,EAFA;;AAMA;AACA;AACA,2BADA;AAEA,aAFA,sBAEA;AACA;AACA,OAJA,EADA;;AAOA;AACA,mBADA;AAEA,oBAFA,EAPA;;AAWA;AACA,mBADA;AAEA,oBAFA,EAXA;;AAeA;AACA,mBADA;AAEA,mBAFA,EAfA;;AAmBA;AACA;AACA,mBADA;AAEA,mBAFA,EApBA;;AAwBA;AACA;AACA,4BADA;AAEA,gBAFA,EAzBA;;AA6BA;AACA;AACA,kBADA;AAEA,qBAFA,EA9BA;;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA,kBADA;AAEA,sBAFA,EAvCA;;AA2CA;AACA;AACA,2BADA;AAEA,aAFA,sBAEA;AACA;AACA,OAJA,EA5CA;;AAkDA;AACA,kBADA;AAEA,iBAFA,EAlDA;;AAsDA;AACA,kBADA;AAEA,aAFA,sBAEA;AACA;AACA;AACA,sBAFA;AAGA;AACA,yBAJA;AAKA;AACA,yBANA;;AAQA,OAXA,EAtDA;;AAmEA;AACA,kBADA;AAEA,aAFA,sBAEA;AACA;AACA,uBADA;AAEA,wBAFA;;AAIA,OAPA,EAnEA;;AA4EA;AACA,mBADA;AAEA,oBAFA,EA5EA;;AAgFA;AACA,kBADA;AAEA,sBAFA,EAhFA,EANA;;;AA2FA;AACA;AACA,aADA,mBACA,MADA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAVA;AAWA;AACA,OAhBA;AAiBA,qBAjBA,EADA,EA3FA;;;AAgHA,MAhHA,kBAgHA;AACA;AACA,eADA;;AAGA,GApHA;AAqHA;AACA,aADA,uBACA;AACA;AACA;AACA;AACA,OAFA;AAGA;AACA,KAPA;AAQA,YARA,sBAQA;AACA;AACA;AACA;AACA;AACA,KAbA;AAcA,eAdA,yBAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAzBA;AA0BA,WA1BA,qBA0BA;AACA;AACA;AACA;AACA,OAHA,MAGA;AACA;AACA;AACA;AACA,KAlCA,EArHA;;AAyJA,SAzJA,qBAyJA;AACA;AACA;;AAEA,GA7JA;AA8JA;AACA;;;AAGA,UAJA,oBAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAJA;;AAMA;AACA,KAtBA;AAuBA;;;AAGA,UA1BA,oBA0BA;AACA;AACA;AACA;AACA,kGADA;AAEA,sBAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA7CA;;AA+CA;;;AAGA,eAlDA,yBAkDA;;AAEA;AACA,yBADA,CACA;AACA,gCADA;AAEA,yBAFA;AAGA;AACA,qEAJA;AAKA,mDALA,EAKA;AACA;AACA;AACA,4BADA,EACA;AACA;AACA;AACA,6BALA,GAKA,EALA;AAMA,yBANA,GAMA,EANA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAPA;AAQA;AACA;AACA,4NADA;AAEA,sCAFA;AAGA,wCAHA;;AAKA;AACA,qBAhBA,MAgBA;AACA;AACA;AACA;;AAEA,+BA5BA,GA4BA,EA5BA;AA6BA,qBA7BA,GA6BA,CA7BA,cA6BA,gBA7BA;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","file":"uni_modules/uni-file-picker/components/uni-file-picker/uni-file-picker.js","sourcesContent":["import { render, staticRenderFns, recyclableRender, components } from \"./uni-file-picker.vue?vue&type=template&id=363ace0e&\"\nvar renderjs\nimport script from \"./uni-file-picker.vue?vue&type=script&lang=js&\"\nexport * from \"./uni-file-picker.vue?vue&type=script&lang=js&\"\nimport style0 from \"./uni-file-picker.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\runtime\\\\componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"uni_modules/uni-file-picker/components/uni-file-picker/uni-file-picker.vue\"\nexport default component.exports","export * from \"-!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\templateLoader.js??vue-loader-options!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--16-0!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\template.js!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-uni-app-loader\\\\page-meta.js!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./uni-file-picker.vue?vue&type=template&id=363ace0e&\"","var components\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--12-1!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\script.js!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./uni-file-picker.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--12-1!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\script.js!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./uni-file-picker.vue?vue&type=script&lang=js&\"","<template>\r\n  <view class=\"uni-file-picker\">\r\n    <view v-if=\"title\" class=\"uni-file-picker__header\">\r\n      <text class=\"file-title\">{{ title }}</text>\r\n      <text class=\"file-count\">{{ filesList.length }}/{{ limitLength }}</text>\r\n    </view>\r\n    <upload-image v-if=\"fileMediatype === 'image' && showType === 'grid'\" :readonly=\"readonly\"\r\n      :image-styles=\"imageStyles\" :files-list=\"filesList\" :limit=\"limitLength\" :disablePreview=\"disablePreview\"\r\n      :delIcon=\"delIcon\" @uploadFiles=\"uploadFiles\" @choose=\"choose\" @delFile=\"delFile\">\r\n      <slot>\r\n        <view class=\"is-add\">\r\n          <view class=\"icon-add\"></view>\r\n          <view class=\"icon-add rotate\"></view>\r\n        </view>\r\n      </slot>\r\n    </upload-image>\r\n    <upload-file v-if=\"fileMediatype !== 'image' || showType !== 'grid'\" :readonly=\"readonly\" :list-styles=\"listStyles\"\r\n      :files-list=\"filesList\" :showType=\"showType\" :delIcon=\"delIcon\" @uploadFiles=\"uploadFiles\" @choose=\"choose\"\r\n      @delFile=\"delFile\">\r\n      <slot><button type=\"primary\" size=\"mini\">选择文件</button></slot>\r\n    </upload-file>\r\n  </view>\r\n</template>\r\n\r\n<script>\r\n  import * as uniCloud from './choose-and-upload-file.js'\r\n  import uploadImage from './upload-image.vue'\r\n  import uploadFile from './upload-file.vue'\r\n  let fileInput = null\r\n  /**\r\n   * FilePicker 文件选择上传\r\n   * @description 文件选择上传组件，可以选择图片、视频等任意文件并上传到当前绑定的服务空间\r\n   * @tutorial https://ext.dcloud.net.cn/plugin?id=4079\r\n   * @property {Object|Array}\tvalue\t组件数据，通常用来回显 ,类型由return-type属性决定\r\n   * @property {Boolean}\tdisabled=[true|false]\t组件禁用\r\n   * \t@value true \t禁用\r\n   * \t@value false \t取消禁用\r\n   * @property {Boolean}\treadonly=[true|false]\t组件只读，不可选择，不显示进度，不显示删除按钮\r\n   * \t@value true \t只读\r\n   * \t@value false \t取消只读\r\n   * @property {String}\treturn-type=[array|object]\t限制 value 格式，当为 object 时 ，组件只能单选，且会覆盖\r\n   * \t@value array\t规定 value 属性的类型为数组\r\n   * \t@value object\t规定 value 属性的类型为对象\r\n   * @property {Boolean}\tdisable-preview=[true|false]\t禁用图片预览，仅 mode:grid 时生效\r\n   * \t@value true \t禁用图片预览\r\n   * \t@value false \t取消禁用图片预览\r\n   * @property {Boolean}\tdel-icon=[true|false]\t是否显示删除按钮\r\n   * \t@value true \t显示删除按钮\r\n   * \t@value false \t不显示删除按钮\r\n   * @property {Boolean}\tauto-upload=[true|false]\t是否自动上传，值为true则只触发@select,可自行上传\r\n   * \t@value true \t自动上传\r\n   * \t@value false \t取消自动上传\r\n   * @property {Number|String}\tlimit\t最大选择个数 ，h5 会自动忽略多选的部分\r\n   * @property {String}\ttitle\t组件标题，右侧显示上传计数\r\n   * @property {String}\tmode=[list|grid]\t选择文件后的文件列表样式\r\n   * \t@value list \t列表显示\r\n   * \t@value grid \t宫格显示\r\n   * @property {String}\tfile-mediatype=[image|video|all]\t选择文件类型\r\n   * \t@value image\t只选择图片\r\n   * \t@value video\t只选择视频\r\n   * \t@value all\t\t选择所有文件\r\n   * @property {Array}\tfile-extname\t选择文件后缀，根据 file-mediatype 属性而不同\r\n   * @property {Object}\tlist-style\tmode:list 时的样式\r\n   * @property {Object}\timage-styles\t选择文件后缀，根据 file-mediatype 属性而不同\r\n   * @event {Function} select \t选择文件后触发\r\n   * @event {Function} progress 文件上传时触发\r\n   * @event {Function} success \t上传成功触发\r\n   * @event {Function} fail \t\t上传失败触发\r\n   * @event {Function} delete \t文件从列表移除时触发\r\n   */\r\n  export default {\r\n    name: 'uniFilePicker',\r\n    components: {\r\n      uploadImage,\r\n      uploadFile\r\n    },\r\n    props: {\r\n      value: {\r\n        type: [Array, Object],\r\n        default () {\r\n          return []\r\n        }\r\n      },\r\n      disabled: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      disablePreview: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      delIcon: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n      // 自动上传\r\n      autoUpload: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n      // 最大选择个数 ，h5只能限制单选或是多选\r\n      limit: {\r\n        type: [Number, String],\r\n        default: 9\r\n      },\r\n      // 列表样式 grid | list | list-card\r\n      mode: {\r\n        type: String,\r\n        default: 'grid'\r\n      },\r\n      // inputUrl: {\r\n      // \ttype: Boolean,\r\n      // \tdefault: false\r\n      // },\r\n      // 选择文件类型  image/video/all\r\n      fileMediatype: {\r\n        type: String,\r\n        default: 'image'\r\n      },\r\n      // 文件类型筛选\r\n      fileExtname: {\r\n        type: [Array, String],\r\n        default () {\r\n          return []\r\n        }\r\n      },\r\n      title: {\r\n        type: String,\r\n        default: ''\r\n      },\r\n      listStyles: {\r\n        type: Object,\r\n        default () {\r\n          return {\r\n            // 是否显示边框\r\n            border: true,\r\n            // 是否显示分隔线\r\n            dividline: true,\r\n            // 线条样式\r\n            borderStyle: {}\r\n          }\r\n        }\r\n      },\r\n      imageStyles: {\r\n        type: Object,\r\n        default () {\r\n          return {\r\n            width: 'auto',\r\n            height: 'auto'\r\n          }\r\n        }\r\n      },\r\n      readonly: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      returnType: {\r\n        type: String,\r\n        default: 'array'\r\n      }\r\n    },\r\n    watch: {\r\n      value: {\r\n        handler(newVal) {\r\n          let newFils = []\r\n          let newData = [].concat(newVal || [])\r\n          newData.forEach(v => {\r\n            const files = this.files.find(i => i.url === v.url)\r\n            const reg = /cloud:\\/\\/([\\w.]+\\/?)\\S*/\r\n            if (!v.path) {\r\n              v.path = v.url\r\n            }\r\n            if (reg.test(v.url)) {\r\n              this.getTempFileURL(v, v.url)\r\n            }\r\n            newFils.push(files ? files : v)\r\n          })\r\n          this.files = newFils\r\n        },\r\n        immediate: true\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        files: [],\r\n      }\r\n    },\r\n    computed: {\r\n      filesList() {\r\n        let files = []\r\n        this.files.forEach(v => {\r\n          files.push(v)\r\n        })\r\n        return files\r\n      },\r\n      showType() {\r\n        if (this.fileMediatype === 'image') {\r\n          return this.mode\r\n        }\r\n        return 'list'\r\n      },\r\n      limitLength() {\r\n        if (this.returnType === 'object') {\r\n          return 1\r\n        }\r\n        if (!this.limit) {\r\n          return 1\r\n        }\r\n        if (this.limit >= 9) {\r\n          return 9\r\n        }\r\n        return this.limit\r\n      },\r\n      extname() {\r\n        if (!Array.isArray(this.fileExtname)) {\r\n          let extname = this.fileExtname.replace(/(\\[|\\])/g, '')\r\n          return extname.split(',')\r\n        } else {\r\n          return this.fileExtname\r\n        }\r\n        return []\r\n      }\r\n    },\r\n    created() {\r\n      // this.files = Object.assign([], this.value)\r\n      this.tempData = {}\r\n\r\n    },\r\n    methods: {\r\n      /**\r\n       * 继续上传\r\n       */\r\n      upload() {\r\n        // TODO 先放弃这个实现 ，不能全部上传\r\n        // if (this.$uploadFiles) {\r\n        // \tthis.$uploadFiles()\r\n        // } else {\r\n        // \tuni.showToast({\r\n        // \t\ttitle: '请先选择文件',\r\n        // \t\ticon: 'none'\r\n        // \t})\r\n        // }\r\n        let files = []\r\n        this.files.forEach((v, index) => {\r\n          if (v.status === 'ready' || v.status === 'error') {\r\n            files.push(Object.assign({}, v))\r\n          }\r\n        })\r\n\r\n        this.uploadFiles(files)\r\n      },\r\n      /**\r\n       * 选择文件\r\n       */\r\n      choose() {\r\n        if (this.disabled) return\r\n        if (this.files.length >= Number(this.limitLength) && this.showType !== 'grid' && this.returnType === 'array') {\r\n          uni.showToast({\r\n            title: `您最多选择 ${this.limitLength} 个文件`,\r\n            icon: 'none'\r\n          })\r\n          return\r\n        }\r\n        // uni.showActionSheet({\r\n        // \titemList: ['填写 url 地址', '选择文件'],\r\n        // \tsuccess: (res) => {\r\n        // \t\tif (res.tapIndex === 1) {\r\n        // \t\t\tthis.chooseFiles()\r\n        // \t\t}\r\n        // \t},\r\n        // \tfail: function(res) {}\r\n        // });\r\n        this.chooseFiles()\r\n      },\r\n\r\n      /**\r\n       * 选择文件并上传\r\n       */\r\n      chooseFiles() {\r\n\r\n        uniCloud\r\n          .chooseAndUploadFile({\r\n            type: this.fileMediatype,\r\n            compressed: false,\r\n            // TODO 如果为空，video 有问题\r\n            extension: this.extname.length > 0 ? this.extname : undefined,\r\n            count: this.limitLength - this.files.length, //默认9\r\n            onChooseFile: async res => {\r\n              if ((Number(this.limitLength) === 1 && this.disablePreview && !this.disabled) || this.returnType ===\r\n                'object') {\r\n                this.files = []\r\n              }\r\n              let filePaths = []\r\n              let files = []\r\n              if (this.extname && this.extname.length > 0) {\r\n                res.tempFiles.forEach(v => {\r\n                  let fileFullName = this.getFileExt(v.name)\r\n                  const extname = fileFullName.ext.toLowerCase()\r\n                  if (this.extname.indexOf(extname) !== -1) {\r\n                    files.push(v)\r\n                    filePaths.push(v.path)\r\n                  }\r\n                })\r\n                if (files.length !== res.tempFiles.length) {\r\n                  uni.showToast({\r\n                    title: `当前选择了${res.tempFiles.length}个文件 ，${res.tempFiles.length - files.length} 个文件格式不正确`,\r\n                    icon: 'none',\r\n                    duration: 5000\r\n                  })\r\n                }\r\n              } else {\r\n                filePaths = res.tempFilePaths\r\n                files = res.tempFiles\r\n              }\r\n\r\n              let currentData = []\r\n              for (let i = 0; i < files.length; i++) {\r\n                if (this.limitLength - this.files.length <= 0) break\r\n                files[i].uuid = Date.now()\r\n                let filedata = await this.getFileData(files[i], this.fileMediatype)\r\n                filedata.progress = 0\r\n                filedata.status = 'ready'\r\n                this.files.push(filedata)\r\n                currentData.push(filedata)\r\n              }\r\n              this.$emit('select', {\r\n                tempFiles: currentData,\r\n                tempFilePaths: filePaths\r\n              })\r\n              res.tempFiles = files\r\n              // 停止自动上传\r\n              if (!this.autoUpload) {\r\n                res.tempFiles = []\r\n                // TODO 先放弃这个实现 ，不能全部上传\r\n                // return new Promise((resolve) => {\r\n                // \tthis.$uploadFiles = () => {\r\n                // \t\t// this._is_uploading = true\r\n                // \t\tresolve(res)\r\n                // \t}\r\n                // })\r\n              }\r\n            },\r\n            onUploadProgress: progressEvent => {\r\n              this.setProgress(progressEvent, progressEvent.index)\r\n            }\r\n          })\r\n          .then(result => {\r\n            this.setSuccessAndError(result.tempFiles)\r\n          })\r\n          .catch(err => {\r\n            console.log('选择失败', err)\r\n          })\r\n      },\r\n\r\n      /**\r\n       * 批传\r\n       * @param {Object} e\r\n       */\r\n      uploadFiles(files) {\r\n        files = [].concat(files)\r\n        this.uploadCloudFiles(files, 5, res => {\r\n            this.setProgress(res, res.index, true)\r\n          })\r\n          .then(result => {\r\n            this.setSuccessAndError(result)\r\n          })\r\n          .catch(err => {\r\n            console.log('err', err)\r\n          })\r\n      },\r\n\r\n      /**\r\n       * 成功或失败\r\n       */\r\n      async setSuccessAndError(res, fn) {\r\n        let successData = []\r\n        let errorData = []\r\n        let tempFilePath = []\r\n        let errorTempFilePath = []\r\n        for (let i = 0; i < res.length; i++) {\r\n          // const index  = item.index\r\n          const item = res[i]\r\n          const index = item.uuid ? this.files.findIndex(p => p.uuid === item.uuid) : item.index\r\n          if (index === -1 || !this.files) break\r\n          if (item.errMsg === 'request:fail') {\r\n            this.files[index].url = item.path\r\n            this.files[index].status = 'error'\r\n            this.files[index].errMsg = item.errMsg\r\n            this.files[index].progress = -1\r\n            errorData.push(this.files[index])\r\n            errorTempFilePath.push(this.files[index].url)\r\n          } else {\r\n            this.files[index].errMsg = ''\r\n            this.files[index].url = item.url\r\n            this.files[index].status = 'success'\r\n            successData.push(this.files[index])\r\n            tempFilePath.push(this.files[index].url)\r\n          }\r\n        }\r\n\r\n        if (successData.length > 0) {\r\n          this.setEmit()\r\n          // 状态改变返回\r\n          this.$emit('success', {\r\n            tempFiles: this.backObject(successData),\r\n            tempFilePaths: tempFilePath\r\n          })\r\n        }\r\n\r\n        if (errorData.length > 0) {\r\n          this.$emit('fail', {\r\n            tempFiles: this.backObject(errorData),\r\n            tempFilePaths: errorTempFilePath\r\n          })\r\n        }\r\n      },\r\n\r\n      /**\r\n       * 获取进度\r\n       * @param {Object} progressEvent\r\n       * @param {Object} index\r\n       * @param {Object} type\r\n       */\r\n      setProgress(progressEvent, index, type) {\r\n        const fileLenth = this.files.length\r\n        const percentNum = (index / fileLenth) * 100\r\n        const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total)\r\n        let idx = index\r\n        if (!type) {\r\n          idx = this.files.findIndex(p => p.uuid === progressEvent.tempFile.uuid)\r\n        }\r\n        if (idx === -1 || !this.files[idx]) return\r\n        this.files[idx].progress = percentCompleted\r\n        // 上传中\r\n        this.$emit('progress', {\r\n          index: idx,\r\n          progress: parseInt(percentCompleted),\r\n          tempFile: this.files[idx]\r\n        })\r\n      },\r\n\r\n      /**\r\n       * 删除\r\n       * @param {Object} index\r\n       */\r\n      delFile(index) {\r\n        this.$emit('delete', {\r\n          tempFile: this.files[index],\r\n          tempFilePath: this.files[index].url\r\n        })\r\n        this.files.splice(index, 1)\r\n        this.$nextTick(() => {\r\n          this.setEmit()\r\n        })\r\n      },\r\n\r\n      /**\r\n       * 获取文件名和后缀\r\n       * @param {Object} name\r\n       */\r\n      getFileExt(name) {\r\n        const last_len = name.lastIndexOf('.')\r\n        const len = name.length\r\n        return {\r\n          name: name.substring(0, last_len),\r\n          ext: name.substring(last_len + 1, len)\r\n        }\r\n      },\r\n\r\n      /**\r\n       * 获取图片信息\r\n       * @param {Object} filepath\r\n       */\r\n      getFileInfo(filepath) {\r\n        return new Promise((resolve, reject) => {\r\n          uni.getImageInfo({\r\n            src: filepath,\r\n            success(res) {\r\n              resolve(res)\r\n            },\r\n            fail(err) {\r\n              reject(err)\r\n            }\r\n          })\r\n        })\r\n      },\r\n\r\n      /**\r\n       * 获取封装数据\r\n       */\r\n      async getFileData(files, type = 'image') {\r\n        // 最终需要上传数据库的数据\r\n        let fileFullName = this.getFileExt(files.name)\r\n        const extname = fileFullName.ext.toLowerCase()\r\n        let filedata = {\r\n          name: files.name,\r\n          uuid: files.uuid,\r\n          extname: extname || '',\r\n          cloudPath: files.cloudPath,\r\n          fileType: files.fileType,\r\n          url: files.path || files.path,\r\n          size: files.size, //单位是字节\r\n          image: {},\r\n          path: files.path,\r\n          video: {}\r\n        }\r\n        if (type === 'image') {\r\n          const imageinfo = await this.getFileInfo(files.path)\r\n          filedata.image.width = imageinfo.width\r\n          filedata.image.height = imageinfo.height\r\n          filedata.image.location = imageinfo.path\r\n        }\r\n        return filedata\r\n      },\r\n\r\n      /**\r\n       * 批量上传\r\n       */\r\n      uploadCloudFiles(files, max = 5, onUploadProgress) {\r\n        files = JSON.parse(JSON.stringify(files))\r\n        const len = files.length\r\n        let count = 0\r\n        let self = this\r\n        return new Promise(resolve => {\r\n          while (count < max) {\r\n            next()\r\n          }\r\n\r\n          function next() {\r\n            let cur = count++\r\n            if (cur >= len) {\r\n              !files.find(item => !item.url && !item.errMsg) && resolve(files)\r\n              return\r\n            }\r\n            const fileItem = files[cur]\r\n            const index = self.files.findIndex(v => v.uuid === fileItem.uuid)\r\n            fileItem.url = ''\r\n            delete fileItem.errMsg\r\n\r\n            uniCloud\r\n              .uploadFile({\r\n                filePath: fileItem.path,\r\n                cloudPath: fileItem.cloudPath,\r\n                fileType: fileItem.fileType,\r\n                onUploadProgress: res => {\r\n                  res.index = index\r\n                  onUploadProgress && onUploadProgress(res)\r\n                }\r\n              })\r\n              .then(res => {\r\n                fileItem.url = res.fileID\r\n                fileItem.index = index\r\n                if (cur < len) {\r\n                  next()\r\n                }\r\n              })\r\n              .catch(res => {\r\n                fileItem.errMsg = res.errMsg || res.message\r\n                fileItem.index = index\r\n                if (cur < len) {\r\n                  next()\r\n                }\r\n              })\r\n          }\r\n        })\r\n      },\r\n      setEmit() {\r\n        let data = []\r\n        if (this.returnType === 'object') {\r\n          data = this.backObject(this.files)[0]\r\n        } else {\r\n          data = this.backObject(this.files)\r\n        }\r\n        this.$emit('input', data)\r\n      },\r\n      backObject(files) {\r\n        let newFilesData = JSON.parse(JSON.stringify(files))\r\n        newFilesData.map(v => {\r\n          delete v.path\r\n          delete v.uuid\r\n          delete v.video\r\n          delete v.progress\r\n          delete v.errMsg\r\n          delete v.status\r\n          delete v.cloudPath\r\n          return v\r\n        })\r\n        return newFilesData\r\n      },\r\n      async getTempFileURL(file, fileList) {\r\n        fileList = {\r\n          fileList: [].concat(fileList)\r\n        }\r\n        const urls = await uniCloud.getTempFileURL(fileList)\r\n        file.path = urls.fileList[0].tempFileURL || ''\r\n        const index = this.files.findIndex(v => v.path === file.path)\r\n        if (index !== -1) {\r\n          this.$set(this.files, index, file)\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .uni-file-picker {\r\n    /* #ifndef APP-NVUE */\r\n    box-sizing: border-box;\r\n    overflow: hidden;\r\n    /* #endif */\r\n  }\r\n\r\n  .uni-file-picker__header {\r\n    padding-top: 5px;\r\n    padding-bottom: 10px;\r\n    /* #ifndef APP-NVUE */\r\n    display: flex;\r\n    /* #endif */\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .file-title {\r\n    font-size: 14px;\r\n    color: #333;\r\n  }\r\n\r\n  .file-count {\r\n    font-size: 14px;\r\n    color: #999;\r\n  }\r\n\r\n  .is-add {\r\n    /* #ifndef APP-NVUE */\r\n    display: flex;\r\n    /* #endif */\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  .icon-add {\r\n    width: 50px;\r\n    height: 5px;\r\n    background-color: #f1f1f1;\r\n    border-radius: 2px;\r\n  }\r\n\r\n  .rotate {\r\n    position: absolute;\r\n    transform: rotate(90deg);\r\n  }\r\n</style>\n","import mod from \"-!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\mini-css-extract-plugin\\\\dist\\\\loader.js??ref--6-oneOf-1-0!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js??ref--6-oneOf-1-1!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\stylePostLoader.js!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--6-oneOf-1-2!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\postcss-loader\\\\src\\\\index.js??ref--6-oneOf-1-3!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./uni-file-picker.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\mini-css-extract-plugin\\\\dist\\\\loader.js??ref--6-oneOf-1-0!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js??ref--6-oneOf-1-1!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\stylePostLoader.js!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--6-oneOf-1-2!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\postcss-loader\\\\src\\\\index.js??ref--6-oneOf-1-3!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!F:\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./uni-file-picker.vue?vue&type=style&index=0&lang=css&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1624848708280\n      var cssReload = require(\"F:/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"../../\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"sourceRoot":""}